package com.l1337.l1577;


import java.util.Map;
import java.util.TreeMap;

public class Solution {
//    https://leetcode.com/problems/number-of-ways-where-square-of-number-is-equal-to-product-of-two-numbers/discuss/831467/C%2B%2BJava-Two-Sum-O(n-*-m)
    public int numTriplets(int[] nums1, int[] nums2) {
        TreeMap<Integer, Integer> treemap1 = new TreeMap<>();
        TreeMap<Integer, Integer> treemap2 = new TreeMap<>();

        for(int i = 0; i < nums1.length; ++i)
        {
            treemap1.put(nums1[i], treemap1.getOrDefault(nums1[i], 0) + 1);
        }
        for(int i = 0; i < nums2.length; ++i)
        {
            treemap2.put(nums2[i], treemap2.getOrDefault(nums2[i], 0) + 1);
        }

        int ret = 0;
        for(Integer key : treemap1.keySet())
        {
            long product = (long)key * key;
            //find anything between 1 and key
            for(Map.Entry<Integer, Integer> entry: treemap2.headMap(key, true).entrySet())
            {
                if (product % entry.getKey() == 0)
                {
                    long div = product / entry.getKey();
                    if (div == entry.getKey())
                        ret += entry.getValue() * (entry.getValue()-1) / 2 * treemap1.get(key);
                    else
                        ret += entry.getValue() * (treemap2.getOrDefault(div, 0)) * treemap1.get(key);
                }
            }
        }

        for(Integer key : treemap2.keySet())
        {
            long product = (long)key * key;
            //find anything between 1 and key
            for(Map.Entry<Integer, Integer> entry: treemap1.headMap(key, true).entrySet())
            {
                if (product % entry.getKey() == 0)
                {
                    long div = product / entry.getKey();
                    if (div == entry.getKey())
                        ret += entry.getValue() * (entry.getValue()-1) / 2 * treemap2.get(key);
                    else
                        ret += entry.getValue() * (treemap1.getOrDefault(div, 0) *treemap2.get(key));
                }
            }
        }
        return ret;
    }
    public static void main(String [] args) {
        Solution s = new Solution();
        int nums1 [] = new int [] {};
        int nums2 [] = new int [] {};
        System.out.println(s.numTriplets(nums1, nums2));
    }
}
